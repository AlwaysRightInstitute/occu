function ::WriteDPText()
{
  if( system.IsVar("id") )
  {
    object to = dom.GetObject( system.GetVar("id") );
    if( to )
    {
      if( to.IsTypeOf( OT_VARDP ) || to.IsTypeOf( OT_ALARMDP ) )
      {
        integer itoVT = to.ValueType();
        integer itoST = to.ValueSubType();
        boolean btoLogic  = ( (itoVT==ivtBinary)  && (itoST==istBool)    );
        boolean btoList   = ( (itoVT==ivtInteger) && (itoST==istEnum)    );
        boolean btoNumber = ( (itoVT==ivtFloat)   && (itoST==istGeneric) );
        boolean btoAlarm  = ( (itoVT==ivtBinary)  && (itoST==istAlarm)   );
        boolean btoString  = ( (itoVT==ivtString)  && (itoST==istChar8859));
        if( btoLogic || btoAlarm )
        {
          if ( (sValue == "0") || (sValue == "") )
          {
            sRet=sRet#to.ValueName0();
          }
          else
          {
            sRet=sRet#to.ValueName1();
          }
        }
        if( btoList ) 
        { 
          if( sValue == "" )
          {
            sRet=sRet#web.webGetValueFromList(to.ValueList(),0);
          }
          else
          {
            sRet=sRet#web.webGetValueFromList(to.ValueList(),sValue.ToInteger());
          }
        }
        if( btoNumber ) 
        { 
          if (sValue == "")
          {
            sRet=sRet#"0";
          }
          else
          {
            sRet=sRet#sValue;
          }
        }
        if (btoString)
        {
          sRet = sRet # sValue;
        }
        if( to.ValueUnit() != "" )
        {
          sRet=sRet#" "#to.ValueUnit();
        }
      }
      else
      {
        string tsShortKey = to.HSSID();
        string tsLongKey = to.HSSID();
        object toCH = dom.GetObject( to.Channel() );
        if( toCH )
        {
          tsLongKey = toCH.ChnLabel()#"|"#tsLongKey;
        }
        
        boolean tbOptionList = ( (to.ValueType() == ivtInteger) && (to.ValueSubType() == istEnum) );
        boolean tbAction = ( to.ValueSubType() == istAction );
        boolean tbBinary = ( to.ValueType() == ivtBinary );
        boolean tbRead = (to.Operations() & OPERATION_READ);
        boolean tbEvent = (to.Operations() & OPERATION_EVENT);
        boolean tbWrite = (to.Operations() & OPERATION_WRITE);
        
        boolean bBinary = ( to.ValueTypeStr() == "Binary" );
        boolean bFloat = ( to.ValueTypeStr() == "Float" );
        boolean bSpecial = false;
            
        string sVUTmp = to.ValueUnit().ToString();
        string sSpace = " ";
        
        ! ### SUBSTITUTE SPECIAL VALUES
        real fVal1 = 0.0;
        real fVal2 = 0.0;
        string sSpecial = "";
        string stmpSV;
        foreach(stmpSV,oDP.EnumSpecialIDs())
        {
           fVal1 = oDP.GetSpecialValue(stmpSV);
           fVal2 = sValue.ToFloat();
           if( fVal1 == fVal2 )
           {
             bSpecial = true;
             sSpecial = stmpSV;
             sValue = "";
             sVUTmp = "";
             sSpace = "";
           }
        }
        
        if( tbBinary && (tbRead || tbAction) )
        {
          if( sValue == "0" )
          {
            tsShortKey = tsShortKey#"=FALSE";
            tsLongKey = tsLongKey#"=FALSE";
          }
          else
          {
            tsShortKey = tsShortKey#"=TRUE";
            tsLongKey = tsLongKey#"=TRUE";
          }
        }
        
        if( tbOptionList )
        {
          tsShortKey = tsShortKey#"="#web.webGetValueFromList( to.ValueList(), sValue );
          tsLongKey = tsLongKey#"="#web.webGetValueFromList( to.ValueList(), sValue );
        }
        
        if( bSpecial )
        {
          tsShortKey = tsShortKey#"="#sSpecial;
          tsLongKey = tsLongKey#"="#sSpecial;
        }        
        
        string sVTmp = web.webKeyFromStringTable( tsLongKey );
        if( !sVTmp.Length() )
        {
          sVTmp = web.webKeyFromStringTable( tsShortKey );
          if( !sVTmp.Length() )
          {
            sVTmp = "${unknownMessage} ("#tsShortKey#")";
          }
        }
        
        if( !bSpecial )
        {
          if( sVUTmp == "100%" )
          {
            sValue = sValue.ToFloat() * 100;
            sValue = sValue.ToString();
            sVUTmp = "%";
          }

          if( sVUTmp == "degree" )
          {
            sVUTmp = "°";
          }
          
          if( bBinary )
          {
            sValue = "";
            sSpace = "";
          }
          if( bFloat )
          {
            sValue = sValue.ToFloat();
            sValue = sValue.ToString(2);
          }
          if( (!bBinary) && (!bFloat) )
          {
            sValue = sValue.ToInteger();
            sValue = sValue.ToString(0);
          }
          
          if( tbOptionList )
          {
            sValue = "";
            sVUTmp = "";
            sSpace = "";
          }
        }
        
        sVTmp = sVTmp#sSpace#sValue#sVUTmp;
        sRet = sVTmp;
      }
    }
  }
}

! [id]
function ::ReceiptAlarm()
{
  if( system.IsVar("id") )
  {
    object oTmpAlarm = dom.GetObject( system.GetVar("id") );
    if( oTmpAlarm )
    {
      Write("AL OK|["#oTmpAlarm.AlTriggerDP()#"]");
      object oAlTriggerDP = dom.GetObject( oTmpAlarm.AlTriggerDP() );
      if( oAlTriggerDP )
      {
        if( oAlTriggerDP.Operations() & OPERATION_WRITE )
        {
          oTmpAlarm.AlReceipt();
        }
      }
      else
      {
        Write(oTmpAlarm.AlReceipt());
      }
    }
  }
}

! [id], [newname]
function ::changeFunctionName() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    obj.Name(system.GetVar("newname"));
    ! - - - wernerf - - - 
    Call("/xml-api/cache.fn::InvalidateFunctionList()");
    ! - - - wernerf - - - 
  }
}

! [name]
function ::createFunctionRetId() {
  if( system.IsVar( "name" ) ) {
    object o = dom.CreateObject( OT_ENUM, system.GetVar( "name" ) );
    if( o ) {
      o.EnumType( etFunction );
      boolean res = dom.GetObject( ID_FUNCTIONS ).Add( o );
      if( !res )
      {
        Write("-1");
        dom.DeleteObject( o.ID() );
      }
      else {
        ! - - - wernerf - - - 
        Call("/xml-api/cache.fn::InvalidateFunctionList()");
        ! - - - wernerf - - -       
        Write(o.ID());
      }
    }
    else {
      Write("-1");
    }
  }
}

! [id]
function ::deleteFunction() {
}

! [id], [newcolor]
function ::changeFunctionColor() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    
  }
}

! [id], [newcomment]
function ::changeFunctionComment() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    obj.EnumInfo(system.GetVar("newcomment"));
    ! - - - wernerf - - - 
    Call("/xml-api/cache.fn::InvalidateFunctionList()");
    ! - - - wernerf - - -     
  }
}

! [id], [newsymbol]
function ::changeFunctionSymbol() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    
  }
}

function ::buildFuncOverlay() {
  object rooms = dom.GetObject(ID_FUNCTIONS);
  string s = "";
  if (rooms) {
    string tmp = "";
    s = s#"<table>";
    foreach( tmp, rooms.EnumEnabledIDs() ) {
       object func = dom.GetObject(tmp);
       s = s# "<tr>";
       s = s# "<td>"# func.Name() # "</td>";
       s = s#"<td><input id='chk"#func.ID()#"' type='checkbox' onclick='addFunc(id, "#tmp#")' /></td>";
       s = s# "</tr>";
    }
    s = s # "<tr>";
      s = s # "<td colspan='2'>";
        !s = s # "<div align='center' class='CLASS01900' onclick='editFuncs();'>Neu...</div>";
        s = s # "<div align='center' class='CLASS01900' onclick='editFuncs();'>${btnSelectRoomOrFunctionNew}</div>";
      s = s # "</td>";
    s = s # "</tr>";
    
    s = s # "<tr>";
      s = s # "<td colspan='2'>";
        !s = s # "<div align='center' class='CLASS01900' onclick='$(\"funcOverlay\").hide();specialReloadPage();'>Schliessen</div>";
        s = s # "<div align='center' class='CLASS01900' onclick='$(\"funcOverlay\").hide();specialReloadPage();'>${btnSelectRoomOrFunctionClose}</div>";
      s = s # "</td>";
    s = s # "</tr>";
    s = s#"</table>";
  }
  Write(s);
}